Super duper config

* General settings

** Don't show startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Don't show toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Don't show menu
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

** Don't show scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Highlight line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Delete selection
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Different backup directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.saves")))
#+END_SRC

** Display line number when programming
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Show matching parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Automatically close opening delimiters
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

** Bookmarks
Set bookmarks file
#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file "~/.emacs.d/tut-bookmarks")
#+END_SRC

Save bookmarks when modified
#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1)
#+END_SRC
** Others
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
  (global-display-line-numbers-mode)
#+END_SRC


* UI

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    ;; (load-theme 'doom-dracula t)
    ;; (load-theme 'doom-solarized-light t)
    )
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook
  (after-init . doom-modeline-mode))
#+END_SRC

** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+END_SRC

** Org mode

*** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Org settings
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC

** Json mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC


* Modes

** IDO
#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(ido-mode t)
#+END_SRC

** Web mode
#+BEGIN_SRC emacs-lisp
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)   
  (use-package web-mode
    :ensure t
    :mode (("\\.js\\'" . web-mode)
	   ("\\.jsx\\'" .  web-mode)
	   ("\\.ts\\'" . web-mode)
	   ("\\.tsx\\'" . web-mode)
	   ("\\.html\\'" . web-mode)
	   ("\\.css\\'" . web-mode)
    )
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)    
    :commands web-mode
    )
#+END_SRC

** LSP mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook
    (web-mode . lsp-deferred)
    (python-mode . lsp-deferred)
    (lsp-mode . lsp-enable-which-key-integration)
    :config
    (setq lsp-log-io nil)
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-restart 'auto-restart)
    ;; (setq lsp-ui-sideline-show-diagnostics t)
    ;; (setq lsp-ui-sideline-show-hover t)
    ;; (setq lsp-ui-sideline-show-code-actions t)
    ;; For Python
    (setq lsp-pylsp-plugins-ruff-enabled nil) 
    (setq lsp-pylsp-plugins-isort-enabled nil)
    (setq lsp-pylsp-plugins-mypy-enabled nil)
    (setq lsp-pylsp-plugins-mypy-live-mode nil)
    ;; For HTML
    (setq lsp-html-format-enable t)
    :commands lsp-deferred
    )

  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :commands lsp-ui-mode)
#+END_SRC


* General packages

** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (progn
      (setq dashboard-items '((recents . 5)
			      (projects . 5)
			      (bookmarks . 2)
			      )
	    )
      (setq dashboard-show-shotcuts nil)
      (setq dashboard-center-content nil)
      (setq dashboard-banner-logo-title "Have a good day!")
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-set-navigator nil)
      (setq dashboard-navigator-buttons
	    `(;; line1
	    ((,nil
	      "init file"
	      "Open init file"
	      (lambda (&rest _) (find-file "~/.emacs.d/my-tut.org"))
      )))))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
	([f7] . treemacs)
	("C-<f7>" . treemacs-select-window)
	)
  :config
  (setq treemacs-is-never-other-window t)
  )
#+END_SRC

** Ace window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind
  (:map global-map
	("M-o" . ace-window)
	)
  )
#+END_SRC

** Treemacs Projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 1
	company-idle-delay 0.0)
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    ;; :init
    ;; (add-hook 'after-init-hook 'global-company-mode)
    )
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (
	   ("C-x g" . magit-status)
	   ))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+END_SRC

** Amx
#+BEGIN_SRC emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :init
    (ido-ubiquitous-mode)
    )

  (use-package amx
    :ensure t
    :init
    (amx-mode)
    )
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    (:map global-map
	  ("C-S-c C-S-c" . mc/edit-lines)
	  ("C-c >" . mc/mark-next-like-this)
	  ("C-c <" . mc/mark-previous-like-this)
	  ("C-c ." . mc/mark-all-like-this)
	  )
    )
  ;; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  ;; (global-set-key (kbd "C-c >") 'mc/mark-next-like-this)
  ;; (global-set-key (kbd "C-c <") 'mc/mark-previous-like-this)
  ;; (global-set-key (kbd "C-c .") 'mc/mark-all-like-this)
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region)    
    )
#+END_SRC

** Centaur tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :config
    (setq centaur-tabs-set-bar 'over
	  centaur-tabs-set-icons t
	  centaur-tabs-gray-out-icons 'buffer
	  centaur-tabs-height 24
	  centaur-tabs-set-modified-marker t
	  centaur-tabs-modified-marker "â€¢")
    (centaur-tabs-headline-match)
    (centaur-tabs-mode t)
    )
#+END_SRC


* Javascript

** RJSX mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package rjsx-mode
  ;;   :ensure t
  ;;   :mode "\\.js\\'")
#+END_SRC

** Tide
#+BEGIN_SRC emacs-lisp
  ;; (defun setup-tide-mode()
  ;;   "Setup function for tide."
  ;;   (interactive)
  ;;   (tide-setup)
  ;;   (flycheck-mode +1)
  ;;   (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  ;;   (tide-hl-identifier-mode +1)
  ;;   (company-mode +1))

  ;; (use-package tide
  ;;   :ensure t
  ;;   :after (rjsx-mode company flycheck)
  ;;   :hook (rjsx-mode . setup-tide-mode))
#+END_SRC

** Prettier
#+BEGIN_SRC emacs-lisp
    ;; (use-package prettier-js
    ;;   :ensure t
    ;;   :after (rjsx-mode)
    ;;   :hook (rjsx-mode . prettier-js-mode))

  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
	(if (string-match (car my-pair) buffer-file-name)
	    (funcall (cdr my-pair)))))

  (use-package prettier-js
    :ensure t)

  (add-hook 'web-mode-hook #'(lambda ()
			       (enable-minor-mode
				'("\\.jsx?\\'" . prettier-js-mode))
			       (enable-minor-mode
				'("\\.tsx?\\'" . prettier-js-mode))))
#+END_SRC


** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC


* Python

** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (setq elpy-rpc-virtualenv-path 'current)
    :init
    (elpy-enable)
    )
  ;; (add-hook 'elpy-mode-hook 'flycheck-mode)
#+END_SRC

** Reformatter
#+BEGIN_SRC emacs-lisp
  (use-package reformatter
    :ensure t)

  (use-package ruff-format
    :ensure t)

  (add-hook 'python-mode-hook 'ruff-format-on-save-mode)
#+END_SRC
